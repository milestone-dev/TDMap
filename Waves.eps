import ETK.ETKUnit as Unit;
import ETK.ETKUtils as Utils;
import ETK.ETKTimer as Timer;
import ETK.ETKConstants as Const;
import ETK.ETKCommon as Common;
import Balance;
import Towers;

const Screen = StringBuffer(64);
const NumberOfPlayers = bread(0x57F1E1);

const MobCountMultiplierConstant = 1000;
const SpawnDurationConstant = 600;

const MobPlayer = $P7;
const LocationInset = 8;
const LocationSize = 8;
const TileSize = 32;

var Lives = 100;


var CurrentWaveID = 1;
var CurrentWaveSpawnTimer = 0;
var CurrentWaveSpawnTimerIncrement = 0;
var CurrentWave = EUDArray(7);
var CurrentWaveReward = 0;
var CurrentWaveAliveMobs = 0;

const Tier1UnitType = Const.Unit_ZergZergling;
const Tier2UnitType = Const.Unit_ZergMutalisk;
const Tier3UnitType = Const.Unit_ZergMutalisk;
const Tier4UnitType = Const.Unit_ZergDefiler;
const Tier5UnitType = Const.Unit_ZergGuardian;
const Tier6UnitType = Const.Unit_ZergUltralisk;

// TODO update later
const Tier1Penalty = 1;
const Tier2Penalty = 2;
const Tier3Penalty = 5;
const Tier4Penalty = 15;
const Tier5Penalty = 25;
const Tier6Penalty = 60;

const UseTestWave = false;
const TestWave = [0,0,0,0,0,0,1];

// Foward declare
function StartWave(waveID);
function CreateMobObjectForUnit(unit);
function DamageMob(targetUnit, damage, playerID, tower : Towers.Tower);


// TODO Move to Levels.eps later
const TrackLocationFrom = $L("TrackLocation1");
const TrackLocationTo = $L("TrackLocation2");
var LevelTrackCoordinates = 0;
const Level1TrackCoordinates = [
	Common.CreatePoint(106, 35),
	Common.CreatePoint(112, 35),
	Common.CreatePoint(112, 33),
	Common.CreatePoint(110, 33),
	Common.CreatePoint(110, 39),
	Common.CreatePoint(108, 39),
	Common.CreatePoint(108, 37),
	Common.CreatePoint(118, 37),
	Common.CreatePoint(118, 33),
	Common.CreatePoint(120, 33),
	Common.CreatePoint(120, 39),
	Common.CreatePoint(113, 39),
	Common.CreatePoint(113, 42)
];

const Level2TrackCoordinates = [
	Common.CreatePoint(113, 85),
	Common.CreatePoint(113, 88),
	Common.CreatePoint(109, 88),
	Common.CreatePoint(109, 91),
	Common.CreatePoint(105, 91),
	Common.CreatePoint(105, 96),
	Common.CreatePoint(109, 96),
	Common.CreatePoint(109, 99),
	Common.CreatePoint(109, 99),
	Common.CreatePoint(113, 99),
	Common.CreatePoint(113, 99),
	Common.CreatePoint(113, 103),
	Common.CreatePoint(118, 103),
	Common.CreatePoint(118, 99),
	Common.CreatePoint(122, 99),
	Common.CreatePoint(122, 96),
	Common.CreatePoint(122, 96),
	Common.CreatePoint(126, 96),
	Common.CreatePoint(126, 91),
	Common.CreatePoint(122, 91),
	Common.CreatePoint(122, 88),
	Common.CreatePoint(118, 88),
	Common.CreatePoint(118, 85)
];

const Level3TrackCoordinates = [
	Common.CreatePoint(55, 52),
	Common.CreatePoint(73, 52)
];

const LEVEL_COUNT = 3;
const Levels = [
	Level1TrackCoordinates,
	Level2TrackCoordinates,
	Level3TrackCoordinates
];

function SetLevel(levelID) {
	if (levelID == 0) {
		return;
	}
	// Levels are 1-based
	levelID -= 1;
	if (levelID <= LEVEL_COUNT) {
		LevelTrackCoordinates = Levels[levelID];
	} else {
		LevelTrackCoordinates = 0;
	}
	if (!UseTestWave) {
		StartWave(1);
	}
}

function CalculateCurrentWaveRemainingMobs() {
	var num = 0;
	const waves = EUDArray.cast(CurrentWave);
	for (var i = Balance.TIER_COUNT; i > 0; i--) {
		num += waves[i];
	}
	return num;
}

function SubtractLives(penalty) {
	if (penalty > Lives) {
		Lives = 0;
	} else {
		Lives -= penalty;
	}
}

function SubtractAliveMobCount(number) {
	if (number > CurrentWaveAliveMobs) {
		CurrentWaveAliveMobs = 0;
	} else {
		CurrentWaveAliveMobs -= number;
	}
}

function KillAllMobs() {
	RemoveUnit(Const.Unit_AnyUnit, MobPlayer);
	CurrentWaveAliveMobs = 0;
}

function StartWave(waveID) {
	CurrentWaveID = waveID;
	KillAllMobs();
	Towers.ResetMobPriorty();
	if (waveID > 0) {
		// TODO Make sure array is copied, otherwise you can't replay the same wave twice
		CurrentWave = Balance.CalculateMobsForWave(CurrentWaveID); 
		if (UseTestWave) {
			CurrentWave = TestWave;
		}
		CurrentWaveSpawnTimer = MobCountMultiplierConstant;
		const remainingMobs = CalculateCurrentWaveRemainingMobs();
		CurrentWaveReward = remainingMobs;
		CurrentWaveAliveMobs = remainingMobs;
		CurrentWaveSpawnTimerIncrement = remainingMobs * MobCountMultiplierConstant / SpawnDurationConstant;
		EUDPlayerLoop()();
		if (getcurpl() < $P7) {
			Screen.printf("\x03\x13Starting Wave {}", CurrentWaveID);
		}
		EUDEndPlayerLoop();
		if (remainingMobs == 0) {
			setcurpl(P1); Screen.printf("Error: Wave is empty: {}", waveID);
			CurrentWaveID = 0;
		}
	}
}

function GoToNextWave() {
	CurrentWaveReward = CurrentWaveReward/NumberOfPlayers;
	SetResources(AllPlayers, Add, CurrentWaveReward, 0);
	EUDPlayerLoop()();
	if (getcurpl() < $P7) {
		Screen.printf("\x03\x13Wave completed! Each player gets {} minerals each.", CurrentWaveReward);
	}
	EUDEndPlayerLoop();
	CurrentWaveReward = 0;
	StartWave(CurrentWaveID+1);
}

function GetUnitTypeForTier(tier) {
	switch(tier) {
		case 1: return Tier1UnitType; break;
		case 2: return Tier2UnitType; break; // Broodling
		case 3: return Tier3UnitType; break;
		case 4: return Tier4UnitType; break;
		case 5: return Tier5UnitType; break; // Lurker
		case 6: return Tier6UnitType; break;
	}
	return Const.Unit_None;
}

function GetNextUnitType(unitType) {
	switch(unitType) {
		case Const.Unit_ZergUltralisk: return Tier5UnitType; break;
		case Const.Unit_ZergGuardian: return Tier4UnitType; break;
		case Const.Unit_ZergDefiler: return Tier3UnitType; break;
		case Const.Unit_ZergDrone: return Tier2UnitType; break;
		case Const.Unit_ZergMutalisk: return Tier1UnitType; break;
	}
	return Const.Unit_None;
}

function ExtractNextMobFromCurrentWave() {
	const index = 0;
	const waves = EUDArray.cast(CurrentWave);
	for (var i = Balance.TIER_COUNT; i > 0; i--) {
		if (waves[i] > 0) {
			waves[i]--;
			return GetUnitTypeForTier(i);
		} 
	}
	return Const.Unit_None;
}

function MoveUnitToStart(unit) {
	if (CurrentWaveID == 0 || LevelTrackCoordinates == 0) {
		return;
	}
	const LevelTrackCoordinatesArray = EUDArray.cast(LevelTrackCoordinates);
	const startPoint = Common.Point.cast(LevelTrackCoordinatesArray[0]);
	Utils.setLocationToRect(TrackLocationFrom, startPoint.x * TileSize + LocationInset, startPoint.y * TileSize + LocationInset, LocationSize, LocationSize);
	Utils.moveUnit(unit, TrackLocationFrom);
}

function Update() {
	if (CurrentWaveID == 0 || LevelTrackCoordinates == 0) {
		return;
	}

	// Ordering units
	const LevelTrackCoordinatesArray = EUDArray.cast(LevelTrackCoordinates);
	var endPoint;
	for (var i = 0; i < 64; i++) {
		if (LevelTrackCoordinatesArray[i] == 0 || LevelTrackCoordinatesArray[i+1] == 0) {
			break;
		}
		const p1 = Common.Point.cast(LevelTrackCoordinatesArray[i]);
		const p2 = Common.Point.cast(LevelTrackCoordinatesArray[i+1]);
		Utils.setLocationToRect(TrackLocationFrom, p1.x * TileSize + LocationInset, p1.y * TileSize + LocationInset, LocationSize, LocationSize);
		Utils.setLocationToRect(TrackLocationTo, p2.x * TileSize + LocationInset, p2.y * TileSize + LocationInset, LocationSize, LocationSize);
		endPoint = TrackLocationTo;
		Order(Const.Unit_AnyUnit, MobPlayer, TrackLocationFrom, 0, TrackLocationTo);
		// const a,b,c,d = Utils.getLocationRect(TrackLocationTo); setcurpl(P1); Screen.printf("loc TL {}x{} BR {}x{}", a,b,c,d);
	}

	// Creating units
	CurrentWaveSpawnTimer += CurrentWaveSpawnTimerIncrement;
	// setcurpl(P1); Screen.printfAt(1, "CurrentWaveSpawnTimer: {} / {}", CurrentWaveSpawnTimer, MobCountMultiplierConstant);
	const startPoint = Common.Point.cast(LevelTrackCoordinatesArray[0]);
	Utils.setLocationToRect(TrackLocationFrom, startPoint.x * TileSize + LocationInset, startPoint.y * TileSize + LocationInset, LocationSize, LocationSize);
	while (CurrentWaveSpawnTimer >= MobCountMultiplierConstant) {
		CurrentWaveSpawnTimer -= MobCountMultiplierConstant;
		const nextUnitType = ExtractNextMobFromCurrentWave();
		if (nextUnitType != Const.Unit_None) {
			const unit = Utils.createUnit(nextUnitType, TrackLocationFrom, MobPlayer);
			Unit.setRemoveTimer(unit, 100);
			Unit.setStatusFlags(unit, 0x00230005); // 5xxxx does not move, 3xxxx crashes
			CreateMobObjectForUnit(unit);
		} else {
			if (Command(MobPlayer, Exactly, 0, Const.Unit_AnyUnit)) {
				GoToNextWave();
			}
		}
	}

	// Removing units
	// TODO Make into a loop later
	if (Bring(MobPlayer, AtLeast, 1, Tier1UnitType, endPoint)) {
		RemoveUnitAt(1, Tier1UnitType, endPoint, MobPlayer);
		SubtractAliveMobCount(1);
		SubtractLives(Tier1Penalty);
	}
	if (Bring(MobPlayer, AtLeast, 1, Tier2UnitType, endPoint)) {
		RemoveUnitAt(1, Tier2UnitType, endPoint, MobPlayer);
		SubtractAliveMobCount(1);
		SubtractLives(Tier2Penalty);
	}
	if (Bring(MobPlayer, AtLeast, 1, Tier3UnitType, endPoint)) {
		RemoveUnitAt(1, Tier3UnitType, endPoint, MobPlayer);
		SubtractAliveMobCount(1);
		SubtractLives(Tier3Penalty);
	}
	if (Bring(MobPlayer, AtLeast, 1, Tier4UnitType, endPoint)) {
		RemoveUnitAt(1, Tier4UnitType, endPoint, MobPlayer);
		SubtractAliveMobCount(1);
		SubtractLives(Tier4Penalty);
	}
	if (Bring(MobPlayer, AtLeast, 1, Tier5UnitType, endPoint)) {
		RemoveUnitAt(1, Tier5UnitType, endPoint, MobPlayer);
		SubtractAliveMobCount(1);
		SubtractLives(Tier5Penalty);
	}
	if (Bring(MobPlayer, AtLeast, 1, Tier6UnitType, endPoint)) {
		RemoveUnitAt(1, Tier6UnitType, endPoint, MobPlayer);
		SubtractLives(Tier6Penalty);
	}
}

object Mob {
	var unit;
	var overlayUnit;
	var lastTaggedPlayer;

	var igniteStrength;
	var slowStrength;
	var slowTopSpeed;
	// Stim timer used for Staggered
	// Lockdown timer used for Stunned
	// Matrix timer used for Ignite
	// Ensnare timer used for Chilled
	// Timers tick 3 times per second

	function setIgniteTimer(duration) {
		Unit.setDefenseMatrixTimer(this.unit, duration);
	}

	function getIgniteTimer() {
		return Unit.getDefenseMatrixTimer(this.unit);
	}

	function applyIgnite(playerID, strength, duration) {
		if (this.getIgniteTimer() == 0) {
			this.setIgniteTimer(duration/8);
			this.lastTaggedPlayer = playerID;
			this.igniteStrength = strength;
			this.overlayUnit = Utils.createOverlayForUnit(this.unit, Const.Image_Flames2_Type3_Small, duration);
			// setcurpl(P1); Screen.printf("Applying ignite by {} for {}", strength, duration);	
		}
	}

	function setSlowTimer(duration) {
		Unit.setEnsnareTimer(this.unit, duration);
	}

	function getSlowTimer() {
		return Unit.getEnsnareTimer(this.unit);
	}

	// duration is in frames
	function applySlow(playerID, strength, duration, image) {
		if (this.slowStrength == 0 && this.getSlowTimer() == 0) {
			this.setSlowTimer(duration/8);
			this.slowStrength = strength;
			this.slowTopSpeed = (Unit.getOriginalTopSpeed(this.unit) * strength) / 100;
			this.lastTaggedPlayer = playerID;
			Utils.createOverlayForUnit(this.unit, image, duration);
			return true;
		}
		return false;
	}

	function applyEntangle(playerID, strength, duration) {
		// TODO check for existing types
		if (this.applySlow(playerID, strength, duration, Const.Image_Ensnare_Overlay_Small)) {
			// setcurpl(P1); Screen.printf("Applying chill by {} for {}", strength, duration);	
		}
	}

	function applyFreeze(playerID, strength, duration) {
		// TODO check for existing types
		if (this.applySlow(playerID, strength, duration, Const.Image_Stasis_Field_Small)) {
			// setcurpl(P1); Screen.printf("Applying freeze by {} for {}", strength, duration);	
		}
	}

	function applyWind(playerID, strength, duration) {
		// TODO check for existing types
		if (this.applySlow(playerID, strength, duration, Const.Image_Recall_Field)) {
			// setcurpl(P1); Screen.printf("Applying stagger by {} for {}", strength, duration);	
		}
	}

	function update() {
		const igniteTimer = this.getIgniteTimer();
		if (igniteTimer > 0 && Unit.getCycleCounter(this.unit) == 0) {
			// setcurpl(P1); Screen.printf("Burning by {}", this.igniteStrength);	
			DamageMob(this.unit, this.igniteStrength, this.lastTaggedPlayer, 0);
		}
		if (igniteTimer == 0 && this.igniteStrength != 0) {
			// setcurpl(P1); Screen.printf("Stop burn");
			this.igniteStrength = 0;
			Unit.destroy(this.overlayUnit);
		}

		const slowTimer = this.getSlowTimer();
		if (slowTimer > 0) {
			Unit.setTopSpeed(this.unit, this.slowTopSpeed);
			// setcurpl(P1); Screen.printf("Slowtimer {}", slowTimer);
		}
		if (slowTimer == 0 && this.slowStrength != 0) {
			// setcurpl(P1); Screen.printf("Restoring slow");
			Unit.restoreOriginalTopSpeed(this.unit);
			Unit.destroy(this.overlayUnit);
			this.slowStrength = 0;
			this.slowTopSpeed = 0;
		}
	}

	function destruct() {
		//called just before free
	}
};

function GetMobObjectForUnit(unit) : Mob {
	if (Unit.getConnectedUnit(unit) == 0) {
		return 0;
	}
	return Mob.cast(Unit.getConnectedUnit(unit));
}

function CreateMobObjectForUnit(unit) {
	const mob = Mob.alloc();
	mob.unit = unit;
	Unit.setConnectedUnit(unit, mob);
}

function DestroyMobObjectForUnit(unit) {
	const mob = Mob.cast(Unit.getConnectedUnit(unit));
	mob.destruct();
	Mob.free(mob);
}

// tower can be 0
function DamageMob(targetUnit, damage, playerID, tower : Towers.Tower) {
	if (Unit.getHitpoints(targetUnit) == 0) {
		return;
	}
	if (Unit.damage(targetUnit, damage)) {
		DestroyMobObjectForUnit(targetUnit);
		const targetUnitType = Unit.getUnitType(targetUnit);
		if (tower != 0) {
			Unit.set8Flag(tower.unit, Unit.get8Flag(tower.unit) + 1);
		}
		SetResources(playerID, Add, Utils.getUnitDestroyValue(targetUnitType), 0);
		const unitType = GetNextUnitType(targetUnitType);
		if (unitType != Const.Unit_None) {
			const unit = Utils.createUnit(unitType, Utils.OFFSCREEN_LOCATION, $P7);
			CreateMobObjectForUnit(unit);
			Unit.setStatusFlags(unit, 0x00230005); // 5xxxx does not move
			Utils.moveUnit(unit, Utils.moveUtilLocationToUnit(targetUnit));
			Unit.setRemoveTimer(unit, Unit.getRemoveTimer(targetUnit));
			Unit.orderToPoint(unit, Unit.getOrderTargetX(targetUnit), Unit.getOrderTargetY(targetUnit));
		} else {
			SubtractAliveMobCount(1);
		}
	}
}
