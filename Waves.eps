import ETK.ETKUnit as Unit;
import ETK.ETKUtils as Utils;
import ETK.ETKTimer as Timer;
import ETK.ETKConstants as Const;
import ETK.ETKCommon as Common;
import Balance;
const Screen = StringBuffer(64);

var CurrentWaveID;
var CurrentWave = EUDArray(7);
var SpawnCooldown;

const TestWave = [0,0,0,0,0,0,1];

// TODO Extend to all players, move to a point system.
const SpawnLocations = [
	$L("P1Track1")
];

function KillAllMobs() {
	RemoveUnit(Const.Unit_AnyUnit, P7);
}

function StartWave(waveID) {
	CurrentWaveID = waveID;
	KillAllMobs();
	if (waveID > 0) {
		setcurpl(P1); Screen.printf("Starting Wave {}", waveID);
		// CurrentWave = TestWave;
		CurrentWave = Balance.CalculateMobsForWave(CurrentWaveID);
	}
}

function GoToNextWave() {
	StartWave(CurrentWaveID+1);
}

function GetUnitTypeForTier(tier) {
	switch(tier) {
	    case 1: return Const.Unit_ZergZergling; break;
	    case 2: return Const.Unit_ZergBroodling; break;
	    case 3: return Const.Unit_ZergDrone; break;
	    case 4: return Const.Unit_ZergDefiler; break;
	    case 5: return Const.Unit_ZergLurker; break;
	    case 6: return Const.Unit_ZergUltralisk; break;
	}
    return Const.Unit_None;
}

function GetNextUnitType(unitType) {
    switch(unitType) {
        case Const.Unit_ZergUltralisk: return Const.Unit_ZergLurker; break;
        case Const.Unit_ZergLurker: return Const.Unit_ZergDefiler; break;
        case Const.Unit_ZergDefiler: return Const.Unit_ZergDrone; break;
        case Const.Unit_ZergDrone: return Const.Unit_ZergBroodling; break;
        case Const.Unit_ZergBroodling: return Const.Unit_ZergZergling; break;
    }
    return Const.Unit_None;
}

function CalculateCurrentWaveRemainingMobs() {
	var num = 0;
	const waves = EUDArray.cast(CurrentWave);
	for (var i = Balance.TIER_COUNT; i > 0; i--) {
		num += waves[i];
	}
	return num;
}

function ExtractNextMobFromCurrentWave() {
	const index = 0;
	const waves = EUDArray.cast(CurrentWave);
	for (var i = Balance.TIER_COUNT; i > 0; i--) {
		if (waves[i] > 0) {
			waves[i]--;
			return GetUnitTypeForTier(i);
		} 
	}
	return Const.Unit_None;
}

function Update() {
	if (CurrentWaveID == 0) {
		return;
	}
	if (SpawnCooldown == 0) {
		SpawnCooldown = 2; // TODO replace with calculated cooldown
		const playerCount = 1; // TODO support multiple players and spawn locations
		const nextUnitType = ExtractNextMobFromCurrentWave();
		if (nextUnitType != Const.Unit_None) {
			for (var i = 0; i < playerCount; i++) {
				const unit = Utils.createUnit(nextUnitType, SpawnLocations[i], $P7);
				Unit.setStatusFlags(unit, 0x00230005); // 5xxxx does not move, 3xxxx crashes	
			}
		} else {
			// Wave ended, spawn next
			if (Command(P7, Exactly, 0, Const.Unit_AnyUnit)) {
				GoToNextWave();
			}
		}
	} else {
		SpawnCooldown--;
	}
}