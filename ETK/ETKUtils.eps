//ETKUtils.eps

import ETK.ETKUnit;
import ETK.ETKConstants;
import ETK.ETKTimer;
import TriggerEditor.TETools as te;
// import customText as ct;

// TODO: Make these runtime configurable for other projects in the future
const IMAGE_SPRITE_UNIT_TYPE = $U("Scanner Sweep");
const OVERLAY_SPRITE_UNIT_TYPE = $U("Protoss Shuttle");
const MISSILE_LAUNCHER_UNIT_TYPE = $U("Protoss Corsair");
const FLASH_UNIT_TYPE = $U("Protoss Shuttle");
const TEMP_UNIT_TYPE = ETKConstants.Unit_Kakaru_TwilightCritter;
const TARGET_UNIT_TYPE = 161; // Unused Protoss Building 2
const UTILITY_LOCATION = $L("ETKUtilityLocation");
const UTILITY_LOCATION_2 = $L("ETKUtilityLocation2");
const LOCATION_ANYSIZE = $L("ETKUtilityLocationAnySize");
const OFFSCREEN_LOCATION = $L("ETKUtilityOffscreenLocation");

const ETKUtilsEffectsPlayerID = $P8;
var pathableTestUnit32x32;
var pathableTestUnit16x16;

function abs(n) {
	return n.AtLeast(1<<31) ? -n : n;
}

function offsetPoint(x, xOffset, y, yOffset) {
	return y+xOffset, y+yOffset;
}

// DAT functions. TODO: Move to its own module later

function getUnitDestroyValue(unitType) {
	return wread(0x65FD00 + 16824 + unitType * 2);
}

function setUpgrade(upgrade, value, playerID) {
	bwrite(0x58D2B0 + 0x207C * ((upgrade) / 46) + (playerID) * (46 - 31 * ((upgrade) / 46)) + ((upgrade) % 46), value);
}

function setUnitCost(unitType, value) {
	wwrite(0x65FD00 + 15240 + unitType * 2, value);
}

function setUnitWeapon(unitType, weaponID) {
	bwrite(0x65FD00 + 6624 + unitType * 1, weaponID);
	bwrite(0x65FD00 + 14776 + unitType * 1, weaponID);
}

function setWeaponDamage(weaponID, damage) {
	wwrite(0x6564E0 + 2512 + weaponID * 2, damage);
}

function setWeaponIcon(weaponID, value) {
	wwrite(0x6564E0 + 672 + weaponID * 2, value);
}

function setUnitSubUnit(unitType, subUnitUnitType) {
	wwrite(0x65FD00 + 2752 + unitType * 2, subUnitUnitType);
}

function getUnitElevation(unitType) {
	return bread(0x65FD00 + 13392 + unitType * 1);
}

function setUnitElevation(unitType, elevation) {
	bwrite(0x65FD00 + 13392 + unitType * 1, elevation);
}

function getUnitAdvancedFlags(unitType) {
	return dwread(0x65FD00 + 17280 + unitType * 4);
}

function setUnitAdvancedFlags(unitType, flags) {
	dwwrite(0x65FD00 + 17280 + unitType * 4, flags);
}

function setUnitInitialDirection(unitType, direction) {
	bwrite(0x65FD00 + 2288 + unitType * 1, direction);
}

function getImageDrawFunction(image) {
	return bread(0x666778 + 14000 + image * 1);
}

function setImageDrawFunction(image, drawFunctionID) {
	bwrite(0x666778 + 14000 + image * 1, drawFunctionID);
}

function getImageDrawIfCloaked(image) {
	return bread(0x666778 + 4000 + image * 1);
}

function setImageDrawIfCloaked(image, value) {
	bwrite(0x666778 + 4000 + image * 1, value);
}

function getUnitImage(unitType) {
	const flingyID = bread(0x65FD00 + 18424 + unitType * 1);
	const spriteID = wread(0x6C9858 + 2752 + flingyID * 2);
	return wread(0x665AC0 + 1696 + spriteID * 2);
}

function setUnitImage(unitType, imageID) {
	const flingyID = bread(0x65FD00 + 18424 + unitType * 1);
	const spriteID = wread(0x6C9858 + 2752 + flingyID * 2);
	wwrite(0x665AC0 + 1696 + spriteID * 2, imageID);
}

function getImageClickable(imageID) {
	return bread(0x666778 + 23000 + imageID * 1);
}

function setImageClickable(imageID, clickable) {
	bwrite(0x666778 + 23000 + imageID * 1, clickable);
}

function getUnitFlingy(unitType) {
	return bread(0x65FD00 + 18424 + unitType * 1);
}

function setUnitFlingy(unitType, flingyID) {
	bwrite(0x65FD00 + 18424 + unitType * 1, flingyID);
}

function setUnitMapString(unitType, mapStringID) {
	wwrite(0x65FD00 + 1376 + unitType * 2, mapStringID);
}

function setUnitPortrait(unitType, portraitID) {
	wwrite(0x65FD00 + 12936 + unitType * 2, portraitID);
}

function setUnitVisionRange(unitType, vision) {
	bwrite(0x65FD00 + 13624 + unitType * 1, vision);
}

function setFlingyImage(flingyID, imageID) {
	const spriteID = wread(0x6C9858 + 2752 + flingyID * 2);
	wwrite(0x665AC0 + 1696 + spriteID * 2, imageID);
}

function setSpriteImage(spriteID, imageID) {
	wwrite(0x665AC0 + 1696 + spriteID * 2, imageID);
}

// Generic functions

function SetPColor(pnum, color) {
	const pcolor_dst = 0x581D76 + 8 * pnum;
	const mcolor_dst = 0x581DD6 + pnum;
	bwrite(pcolor_dst, color);
	bwrite(mcolor_dst, color);
}

function BuildCheckEPD(unitEPD, unitType) {
	if(
		wread_epd(unitEPD + 0x098 / 4,  0x098 % 4) == unitType || 
		wread_epd(unitEPD + 0x09A / 4,  0x09A % 4) == unitType || 
		wread_epd(unitEPD + 0x09C / 4,  0x09C % 4) == unitType || 
		wread_epd(unitEPD + 0x09E / 4,  0x09E % 4) == unitType || 
		wread_epd(unitEPD + 0x0A0 / 4,  0x0A0 % 4) == unitType
	){
		return True;
	}
	return False;
}

function isLocationPathable(location) {
	MoveUnit(1, ETKConstants.Unit_UnusedZergBuilding5, ETKUtilsEffectsPlayerID, $L("Anywhere"), location);
	if (Bring(ETKUtilsEffectsPlayerID, Exactly, 1, ETKConstants.Unit_UnusedZergBuilding5, location)) {
		MoveUnit(1, ETKConstants.Unit_UnusedZergBuilding5, ETKUtilsEffectsPlayerID, $L("Anywhere"), OFFSCREEN_LOCATION);
		return true;
	}
	MoveUnit(1, ETKConstants.Unit_UnusedZergBuilding5, ETKUtilsEffectsPlayerID, $L("Anywhere"), OFFSCREEN_LOCATION); 	
	return false;
}

function offsetLocation(location,x,y) {
	addloc(location,x,y);
	return location;
}

function SetLocationToUnitEPD(Location ,unit ,X ,Y) {
	const xpos = wread_epd(unit + X / 4, 0);
	const ypos = wread_epd(unit + Y / 4, 2);
	setloc(Location, xpos, ypos);
}

function setLocationToPoint(location, x, y) {
	setloc(location, x, y);
}

function getLocationPoint(location) {
	const locTable = EPD(0x58DC4C);
	const lx1 = dwread_epd(locTable + location * 5);
	const ly1 = dwread_epd(locTable + location * 5 + 1);
	return lx1, ly1;
}

function getLocationRect(location) {
	const locTable = EPD(0x58DC4C);
	const lx1 = dwread_epd(locTable + location * 5);
	const ly1 = dwread_epd(locTable + location * 5 + 1);
	const lx2 = dwread_epd(locTable + location * 5 + 2);
	const ly2 = dwread_epd(locTable + location * 5 + 3);
	return lx1, ly1, lx2, ly2;
}


function setLocationToRect(location, x, y, w, h) {
	setloc(location, x, y, x+w, y+h);
}

function setLocationToLocation(location, sourceLocation) {
	const locTable = EPD(0x58DC4C);
	const lx1 = dwread_epd(locTable + sourceLocation * 5);
	const ly1 = dwread_epd(locTable + sourceLocation * 5 + 1);
	const lx2 = dwread_epd(locTable + sourceLocation * 5 + 2);
	const ly2 = dwread_epd(locTable + sourceLocation * 5 + 3);
	setloc(location, lx1, ly1, lx2, ly2);
}

function centerLocationOnPoint(location, x, y, w, h) {
	x -= w/2;
	y -= h/2;
	setloc(location, x, y, x+w, y+h);
}

function centerLocationOnUnit(location, unit, w, h) {
	const x, y = ETKUnit.getPosition(unit);
	centerLocationOnPoint(location, x, y, w, h);
	return location;
}

function moveUtilLocationToPoint(x, y) {
	setLocationToPoint(UTILITY_LOCATION, x, y);
	return UTILITY_LOCATION;
}

function moveUtilLocationToUnit(unit) {
	SetLocationToUnitEPD(UTILITY_LOCATION, unit, 0x028, 0x02A);
	return UTILITY_LOCATION;
}

function EUDTurbo() {
	SetMemory(0x6509A0, SetTo, 0);
}

function getNextUnitEPD(){
	return epdread_epd(EPD(0x628438));
}

function getNextUnitPtr(){
	return dwread_epd(EPD(0x628438));
}

function getLocationPosition(location) {
	const locTable = EPD(0x58DC4C);
	const lx1 = dwread_epd(locTable + location * 5);
	const lx2 = dwread_epd(locTable + location * 5 + 2);
	const ly1 = dwread_epd(locTable + location * 5 + 1);
	const ly2 = dwread_epd(locTable + location * 5 + 3);
	const w = lx1-lx2;
	const h = ly1-ly2;
	return lx1+w, ly1+h; // TODO: This seems to return the bottom right position?
}

function CUnitInLocationPadded(unit, location, padding) {
	const locTable = EPD(0x58DC4C);
	const left = dwread_epd(locTable + location * 5) - padding;
	const right = dwread_epd(locTable + location * 5 + 2) + padding;
	const top = dwread_epd(locTable + location * 5 + 1) - padding;
	const bottom = dwread_epd(locTable + location * 5 + 3) + padding;
	
	const ux = ETKUnit.getPositionX(unit);
	const uy = ETKUnit.getPositionY(unit);
	
	return ux >= left && ux <= right && uy >= top && uy <= bottom;
}

function CUnitInLocation(unit, location) {
	return CUnitInLocationPadded(unit, location, 0);
}

function decrementTimers(timerVar) {
	const timers = EUDArray.cast(timerVar);
	for (var i = 0; i < 5; i++) {
		if (timers[i] > 0) {
			timers[i] -= 1;
		}
	}
}

function displayTimers(timersVar) {
	const timers = EUDArray.cast(timersVar);
	for (var i = 0; i < 5; i++) {
		if (timers[i] > 0) {
			// ct.chatAnnouncement(timers[i]);
		}
	}
}

function createImageSpriteAtLocation(image, location) {
	SetMemoryX(0x00666458, SetTo, image, 0x0000ffff);
	CreateUnit(1, IMAGE_SPRITE_UNIT_TYPE, location, ETKUtilsEffectsPlayerID);
	RemoveUnit(IMAGE_SPRITE_UNIT_TYPE, AllPlayers);	
	SetMemoryX(0x00666458, SetTo, 546, 0x0000ffff);
}

function createImageSpriteAtPoint(image, x, y) {
	moveUtilLocationToPoint(x,y);
	createImageSpriteAtLocation(image, UTILITY_LOCATION);
}

function createImageSpriteAtUnitPosition(image, unit) {
	moveUtilLocationToUnit(unit);
	createImageSpriteAtLocation(image, UTILITY_LOCATION);
}

function createImageSpriteAtUnitPositionDelayed(image, unit, time) {
	ETKTimer.add(time, unit, EUDFuncPtr (2, 0) (function(callbackUnit, intervalCount) {
		createImageSpriteAtUnitPosition(callbackUnit, image);
	}));
}

function createImageSpriteAtUnitPositionWithOffset(image, unit, xOffset, yOffset) {
	moveUtilLocationToUnit(unit);
	offsetLocation(UTILITY_LOCATION, xOffset, yOffset);
	createImageSpriteAtLocation(image, UTILITY_LOCATION);
}

function dealDamageToUnitsAtLocation(damage, location, playerID) {
	foreach(ptr, enemyUnit : EUDLoopPlayerUnit(playerID)) {
		if (CUnitInLocation(enemyUnit, location)) {
			ETKUnit.damage(enemyUnit, damage);
		}
	}
}

function dealDamageToUnitsAtLocationDestroyValue(damage, location, playerID) {
	var killedUnits = 0;
	var destroyValue = 0;
	foreach(ptr, enemyUnit : EUDLoopPlayerUnit(playerID)) {
		if (CUnitInLocation(enemyUnit, location)) {
			if (ETKUnit.damage(enemyUnit, damage)) {
				killedUnits++;
				destroyValue += getUnitDestroyValue(ETKUnit.getUnitType(enemyUnit));
			}
		}
	}
	return killedUnits, destroyValue;
}

function dealDamageToPlayerUnitsAtLocation(damage, location, playerIndexStart, playerIndexEnd) {
	foreach(playerID : EUDLoopRange(playerIndexStart, playerIndexEnd)) {
		dealDamageToUnitsAtLocation(damage, location, playerID);
	}
}

function applyFunctionToPlayerUnitsAtLocation(func: EUDFuncPtr (1, 0), location, playerIndexStart, playerIndexEnd) {
	foreach(player : EUDLoopRange(playerIndexStart, playerIndexEnd)) {
		foreach(ptr, unit : EUDLoopPlayerUnit(player)) {
			if (CUnitInLocation(unit, location)) {
				func(unit);
			}
		}
	}
}

function applyFunctionToPlayerUnitsInRectangleAroundUnit(func: EUDFuncPtr (1, 0), playerIndexStart, playerIndexEnd, rectangleSide, unit) {
	centerLocationOnUnit($L("Anysize"), unit, rectangleSide, rectangleSide);
	foreach(player : EUDLoopRange(playerIndexStart, playerIndexEnd)) {
		foreach(ptr, unit : EUDLoopPlayerUnit(player)) {
			if (CUnitInLocation(unit, $L("Anysize"))) {
				func(unit);
			}
		}
	}
}

function displayNotEnoughEnergyMessage(playerID) {
	//Not implemented
	
}

function findUnitInLocation(location, playerID) {
	foreach(ptr, unit : EUDLoopPlayerUnit(playerID)) {
		if (CUnitInLocation(unit, location)) {
			return unit;
		}
		
		// const locTable = EPD(0x58DC4C);
		// const lx1 = dwread_epd(locTable + location * 5);
		// const lx2 = dwread_epd(locTable + location * 5 + 2);
		// const ly1 = dwread_epd(locTable + location * 5 + 1);
		// const ly2 = dwread_epd(locTable + location * 5 + 3);
		
		// const ux = ETKUnit.getPositionX(unit);
		// const uy = ETKUnit.getPositionY(unit);
		
		// const inLoc = ux >= lx1 && ux <= lx2 && uy >= ly1 && uy <= ly2;
		// StringBuffer(256).printf("il? {} u={} ({},{}) L({},{}),({},{})", inLoc, unit, ux, uy, lx1, lx2, ly1, ly2);

		// if (inLoc) {
		// 	return unit;
		// }

	}
	return 0;
}

function findUnitOfType(unitType, playerID) {
	foreach(ptr, unit : EUDLoopPlayerUnit(playerID)) {
		if (ETKUnit.getUnitType(unit) == unitType) {
			return unit;
		}
	}
	return 0;
}

function findUnitOfTypePtr(unitType, playerID) {
	foreach(ptr, unit : EUDLoopPlayerUnit(playerID)) {
		if (ETKUnit.getUnitType(unit) == unitType) {
			return ptr;
		}
	}
	return 0;
}	

function findUnitOfTypeInLocation(location, unitType, playerID) {
	foreach(ptr, unit : EUDLoopPlayerUnit(playerID)) {
		if (ETKUnit.getUnitType(unit) == unitType) {
			if (CUnitInLocation(unit, location)) {
				return unit;
			}	
		}
	}
	return 0;
}	

function findUnitOfTypesInLocation(location, unitTypes: EUDArray, unitTypesCount, playerID) {
	foreach(ptr, unit : EUDLoopPlayerUnit(playerID)) {
		for(var i = 0; i < unitTypesCount; i++) {
			if (ETKUnit.getUnitType(unit) == unitTypes[i]) {
				if (CUnitInLocation(unit, location)) {
					return unit;
				}
			}
		}
	}
	return 0;
}

function findUnitInLocationWithCustomFlag(location, customFlag, playerID) {
	foreach(ptr, unit : EUDLoopPlayerUnit(playerID)) {
		if (ETKUnit.getCustomValue(unit) == customFlag) {
			if (CUnitInLocation(unit, location)) {
				return unit;
			}
		}
	}
	return 0;
}

function getUnitDistance(unit1, unit2) {
	const u1X, u1Y = ETKUnit.getPosition(unit1);
	const u2X, u2Y = ETKUnit.getPosition(unit2);
	const x = abs(u1X-u2X);
	const y = abs(u1Y-u2Y); 
	return x + y;
}

function createUnit(unitType, location, playerID) {
	if (unitType == ETKConstants.Unit_None) {
		return 0;
	}
	const epd = getNextUnitEPD();
	CreateUnit(1,unitType, location, playerID);
	return epd;
}

function createUnitAtPoint(unitType, playerID, x, y) {
	moveUtilLocationToPoint(x,y);
	return createUnit(unitType, UTILITY_LOCATION, playerID);
}

function createUnitAtLocationWithOffset(unitType, location, playerID, xOffset, yOffset) {
	setLocationToLocation(UTILITY_LOCATION, location);
	offsetLocation(UTILITY_LOCATION, xOffset, yOffset);
	const epd = getNextUnitEPD();
	CreateUnit(1,unitType, location, playerID);
	return epd;
}

function removeUnit(unit) {
	if (unit == 0) {
		return;
	}
	ETKUnit.setUnitType(unit, ETKConstants.Unit_Cave);
	RemoveUnit(ETKConstants.Unit_Cave, ETKUnit.getPlayerID(unit));
}

function moveUnit(unit, location) {
	const playerID = ETKUnit.getPlayerID(unit);
	const unitType = ETKUnit.getUnitType(unit);
	ETKUnit.setUnitType(unit, TEMP_UNIT_TYPE);
	MoveUnit(1, TEMP_UNIT_TYPE, playerID, $L("Anywhere"), location);
	ETKUnit.setUnitType(unit, unitType);
}

function bringUnit(unit, location) {
	const playerID = ETKUnit.getPlayerID(unit);
	const unitType = ETKUnit.getUnitType(unit);
	ETKUnit.setUnitType(unit, TEMP_UNIT_TYPE);
	var bring = false;
	if (Bring(playerID, AtLeast, 1, TEMP_UNIT_TYPE, location)) {
		bring = true;
	}
	ETKUnit.setUnitType(unit, unitType);
	return bring;
}

function orderUnit(unit, location) {
	const playerID = ETKUnit.getPlayerID(unit);
	const unitType = ETKUnit.getUnitType(unit);
	ETKUnit.setUnitType(unit, TEMP_UNIT_TYPE);
	Order(TEMP_UNIT_TYPE, playerID, $L("Anywhere"), 0, location);
	ETKUnit.setUnitType(unit, unitType);
}

function removeUnitSafe(unit) {
	moveUtilLocationToUnit(unit);
	RemoveUnitAt(1, ETKUnit.getUnitType(unit), UTILITY_LOCATION, ETKUnit.getPlayerID(unit));
}

function giveUnit(unit, playerID) {
	moveUtilLocationToUnit(unit);
	GiveUnits(1, ETKUnit.getUnitType(unit), ETKUnit.getPlayerID(unit), UTILITY_LOCATION, playerID);
}

function replaceUnit(unit, unitType) {
	moveUtilLocationToUnit(unit);
	const playerID = ETKUnit.getPlayerID(unit);
	removeUnit(unit);
	// RemoveUnitAt(1, ETKUnit.getUnitType(unit), UTILITY_LOCATION, playerID);
	return createUnit(unitType, UTILITY_LOCATION, playerID);
}

function createUnitSafe(unitType, location, playerID) {
	if (!isLocationPathable(location)) {
		StringBuffer().print("Error: Cannot create unit ", unitType);
		return 0;
	}
	const epd = getNextUnitEPD();
	createUnit(unitType, location, playerID);
	return epd;
}

function createUnitsSafe(count, unitType, location, playerID) {
	if (isLocationPathable(location)) {
		CreateUnit(count,unitType, location, playerID);
	}
}

function setUnitColor(epd, color) {
	const sprite = ETKUnit.getSprite(epd);
	bwrite(sprite + 0x0A, color);
}

function canExecuteCustomTargetAbility(unit, orderID, energy, targetingMode, playerTargetingMode) {
	// Assuming current player
	if (!ETKUnit.getOrder(unit) == orderID) {
		return false;
	}
	
	if (!ETKUnit.hasEnergy(unit, energy)) {
		// ct.chatAnnouncement("Not enough energy");
		return false;
	}
	
	if (targetingMode == 1 && !ETKUnit.isOrderTargetUnitValid(unit)) {
		// ct.chatAnnouncement("Must target units");
		return false;
	}

	return true;
}



function unitHasOverlay(unit) {
	foreach(overlayUnitRaw, overlayUnit : EUDLoopPlayerUnit(ETKUtilsEffectsPlayerID)) {
		if (ETKUnit.getUnitType(overlayUnit) == OVERLAY_SPRITE_UNIT_TYPE && ETKUnit.getConnectedUnit(overlayUnit) == unit) {
			return true;
		}
	}
	return false;
}

function updateOverlay(unit) {
	const connectedUnit = ETKUnit.getConnectedUnit(unit);
	if (connectedUnit != 0) {

		if (ETKUnit.getOrder(connectedUnit) == ETKConstants.Order_Die) {
			ETKUnit.setRemoveTimer(unit, 1); 
		}
		ETKUnit.setUnitType(unit, TEMP_UNIT_TYPE);
		moveUtilLocationToUnit(connectedUnit);
		MoveUnit(1, TEMP_UNIT_TYPE, ETKUtilsEffectsPlayerID, $L("Anywhere"), UTILITY_LOCATION);
		ETKUnit.setUnitType(unit, OVERLAY_SPRITE_UNIT_TYPE);
	}
}

function getOverlayForUnit(unit) {
	foreach(overlayUnitRaw, overlayUnit : EUDLoopPlayerUnit(ETKUtilsEffectsPlayerID)) {
		if (ETKUnit.getUnitType(overlayUnit) == OVERLAY_SPRITE_UNIT_TYPE && ETKUnit.getConnectedUnit(overlayUnit) == unit) {
			return overlayUnit;
		}
	}
	return 0;
}

function destroyOverlayForUnit(unit) {
	ETKUnit.destroy(getOverlayForUnit(unit));
	ETKUnit.setConnectedUnit(unit, 0);
}

function createOverlayForUnit(unit, imageID, removeTimer) {
	// if (unitHasOverlay(unit)) {
	// 	destroyOverlayForUnit(unit);
	// }
	moveUtilLocationToUnit(unit);
	setUnitImage(OVERLAY_SPRITE_UNIT_TYPE, imageID);
	const overlayUnit = createUnit(OVERLAY_SPRITE_UNIT_TYPE, OFFSCREEN_LOCATION, ETKUtilsEffectsPlayerID);
	ETKUnit.removeCollision(overlayUnit);
	ETKUnit.setConnectedUnit(overlayUnit, unit);
	if (removeTimer > 0) {
		ETKUnit.setRemoveTimer(overlayUnit, removeTimer);
	}
	updateOverlay(overlayUnit);
	return overlayUnit;
}

function degToDir(deg) {
	var dir = (((deg*1000)/360)*255)/1000;
	dir += 63;
	if (dir > 255) {
		dir -= 255;
	}
	return dir;
}

function dirToDeg(dir) {
	var atan = (((dir*1000)/255)*360)/1000;
	atan -= 82;
	if (atan > 360 - 82) {
		atan += 360;
	}
	return atan;
}

function getPositionFromDirection(originUnit, direction, distance) {
	var targetX = ETKUnit.getPositionX(originUnit);
	var targetY = ETKUnit.getPositionY(originUnit);
	const lx,ly = lengthdir(distance, dirToDeg(direction));
	return targetX + lx, targetY + ly;
}

function getDirectionFromPosition(originUnit, x, y) {
	const originX = ETKUnit.getPositionX(originUnit);
	const originY = ETKUnit.getPositionY(originUnit);
	const tanY = y - originY;
	const tanX = x - originX;
	const direction = degToDir(atan2(tanY, tanX));
	return direction;
}

function getDirectionFromPosition32(originUnit, x, y) {
	const dir = getDirectionFromPosition(originUnit, x, y);
	return (((dir * 1000)/255)*31)/1000;
}

function isMultiplayer() {
	if (dwread(0x0057F0B4) == 1) {
		return true;
	} else {
		return false;
	}
}

function fireMissile(weaponID, originX, originY, targetX, targetY) {
	moveUtilLocationToPoint(originX, originY);
	var cannon = createUnit(MISSILE_LAUNCHER_UNIT_TYPE, UTILITY_LOCATION, ETKUtilsEffectsPlayerID);
	ETKUnit.removeCollision(cannon);
	moveUtilLocationToPoint(targetX, targetY);
	var target = createUnit(TARGET_UNIT_TYPE, UTILITY_LOCATION, ETKUtilsEffectsPlayerID);
	ETKUnit.removeCollision(target);
	ETKUnit.setConnectedUnit(cannon, target);
	ETKUnit.setConnectedUnit(target, cannon);
	setUnitWeapon(MISSILE_LAUNCHER_UNIT_TYPE, weaponID);
	ETKUnit.attackUnit(cannon, target);
	ETKTimer.add(12, cannon, EUDFuncPtr (2, 0) (function(callbackUnit, intervalCount) {
		ETKUnit.stop(callbackUnit);
	}));
	return cannon;
}

function randomArrayItem(array:EUDArray, length) {
	return array[(rand() % length)];
}

function concatenateIntegers(x, y) {
	var pow = 10;
	while(y >= pow) {
		var pow = pow * 10;
	}
	x = x * pow;
	return x + y;        
}


function createFlashCopyOfUnit(unit, location) {
	const flashDirection = (((ETKUnit.getVelocityDirection1(unit) * 100) / 255) * 31) / 100;
	setUnitInitialDirection(FLASH_UNIT_TYPE, flashDirection);
	const unitImageID = getUnitImage(ETKUnit.getUnitType(unit));
	setUnitImage(FLASH_UNIT_TYPE, unitImageID);
	setImageDrawFunction(unitImageID, 17); // Set to Warp Flash
	const flashUnit = createUnit(FLASH_UNIT_TYPE, UTILITY_LOCATION, ETKUtilsEffectsPlayerID);
	ETKUnit.removeCollision(flashUnit);
	setImageDrawFunction(unitImageID, 0); // Reset for later use
	ETKTimer.add(2, flashUnit, EUDFuncPtr (2, 0) (function(unit, intervalCount) {
		RemoveUnit(FLASH_UNIT_TYPE, ETKUtilsEffectsPlayerID);
	}));
	return flashUnit;
}

function knockbackUnit(unit, direction, distance) {
	moveUtilLocationToUnit(unit);
	createFlashCopyOfUnit(unit, UTILITY_LOCATION);
	const knockbackX, knockbackY = getPositionFromDirection(unit, direction, distance);
	moveUtilLocationToUnit(unit);
	setLocationToPoint($L("ETKUtilityLocation2"), knockbackX, knockbackY);
	MoveUnit(1, ETKUnit.getUnitType(unit), ETKUnit.getPlayerID(unit), UTILITY_LOCATION, $L("ETKUtilityLocation2"));
}

function refreshInterface() {
	removeUnit(createUnit(ETKConstants.Unit_ZergZergling, OFFSCREEN_LOCATION, ETKUtilsEffectsPlayerID));	
}

function refreshLocations() {
	refreshInterface();
}

function setLight(val) {
	if (IsUserCP()) {
		SetMemoryEPD(EPD(0x657A9C), (7), val);
	}
}

function getLight() {
	if (IsUserCP()) {
		return dwread_epd(EPD(0x657A9C));
	}
	return 0;
}

function setup() {
	pathableTestUnit32x32 = createUnit(ETKConstants.Unit_UnusedProtossBuilding1, OFFSCREEN_LOCATION, ETKUtilsEffectsPlayerID);
	pathableTestUnit16x16 = createUnit(ETKConstants.Unit_UnusedZergBuilding5, OFFSCREEN_LOCATION, ETKUtilsEffectsPlayerID);
}
