import ETK.ETKUnit as Unit;
import ETK.ETKUtils as Utils;
import ETK.ETKTimer as Timer;
import ETK.ETKConstants as Const;

const WEAPON_OBJ = EUDArray(64);
var WEAPON_COUNT = 0;
const pp = StringBuffer(256);

object WeaponType {
    var id;
    var imageID;
    var sfxID;
    var fire: EUDFuncPtr (4, 0);
    var onUnitHit: EUDFuncPtr (1, 0);
    var baseDamage;
    var radius;
    var cooldown;
};

function getWeapon(id): WeaponType {
    return WEAPON_OBJ[id];
}

function isWeaponValid(id) {
    return getWeapon(id) != 0 && id < WEAPON_COUNT;
}

function addWeapon(weapon : WeaponType) {
    weapon.id = WEAPON_COUNT;
    WEAPON_OBJ[WEAPON_COUNT] = weapon;
    WEAPON_COUNT++;
}

function playWeaponSfx(id) {
    switch (id) {
        case 0: PlayWAV("sound\\bullet\\tghfir00.wav"); break;
        case 1: PlayWAV("sound\\bullet\\SHOCKBMB.wav"); break;
        case 2: PlayWAV("sound\\bullet\\zluhit00.wav"); break;
        case 3: PlayWAV("sound\\bullet\\ZBGHit00.wav"); break;
        case 4: PlayWAV("sound\\bullet\\psaHit00.wav"); break;
    }
}

function loadWeapons() {

    const defaultFire = EUDFuncPtr (4, 0) (function(x, y, location, id) {
        const weapon = getWeapon(id);
        foreach(ptr, enemyUnit : EUDLoopPlayerUnit($P7)) {
            if (Utils.CUnitInLocation(enemyUnit, location)) {
                Unit.damage(enemyUnit, weapon.baseDamage);
            }
        }
    });

    const wpn0 = WeaponType.alloc();
    wpn0.imageID = Const.Image_Burst_Lasers_Hit;
    wpn0.baseDamage = 10;
    wpn0.radius = 44;
    wpn0.cooldown = 2;
    wpn0.fire = defaultFire;
    addWeapon(wpn0);

    const wpn1 = WeaponType.alloc();
    wpn1.imageID = Const.Image_C_10_Canister_Rifle_Hit;
    wpn1.baseDamage = 32;
    wpn1.radius = 32;
    wpn1.cooldown = 16;
    wpn1.fire = defaultFire;
    addWeapon(wpn1);

    const wpn2 = WeaponType.alloc();
    wpn2.imageID = Const.Image_Sunken_Colony_Tentacle;
    wpn2.baseDamage = 100;
    wpn2.radius = 32;
    wpn2.cooldown = 24;
    wpn2.fire = defaultFire;
    addWeapon(wpn2);

    const wpn3 = WeaponType.alloc();
    wpn3.imageID = Const.Image_Yamato_Gun_Hit;
    wpn3.baseDamage = 45;
    wpn3.radius = 64;
    wpn3.cooldown = 15;
    wpn3.fire = defaultFire;
    addWeapon(wpn3);

    const wpn4 = WeaponType.alloc();
    wpn4.imageID = Const.Image_Acid_Spore_Hit;
    wpn4.baseDamage = 32;
    wpn4.radius = 72;
    wpn4.cooldown = 18;
    wpn4.fire = defaultFire;
    addWeapon(wpn4);

    const wpn5 = WeaponType.alloc();
    wpn5.imageID = Const.Image_Scarab_Hit;
    wpn5.baseDamage = 150;
    wpn5.radius = 96;
    wpn5.cooldown = 24;
    wpn5.fire = defaultFire;
    addWeapon(wpn5);

    /*
    const wpn = WeaponType.alloc();
    w3.imageID = Const.Image_C_10_Canister_Rifle_Hit;
    w3.baseDamage = 10;
    w3.cooldown = 10;
    w3.onUnitHit = EUDFuncPtr (2, 0) (function(attackingUnit, hitUnit) {
        // All of this should probably be a utility function
        Unit.setCustomValue(hitUnit, 1); // Used to identify units that have already been hit. TEMP, use another field
        const hitUnitX, hitUnitY = Unit.getPosition(hitUnit);
        const range = 256; // To be tweaked
        Utils.centerLocationOnPoint($L("Anysize"), hitUnitX, hitUnitY, range, range);
        const nextUnit = Utils.findUnitInLocationWithCustomFlag($L("Anysize"), 0, Unit.getPlayerID(hitUnit));
        if (nextUnit != 0) {
            const nextUnitX, nextUnitY = Unit.getPosition(nextUnit);
            const targetUnit = Unit.getConnectedUnit(cannon);
            Unit.setLastAttackingPlayer(targetUnit, Unit.getPlayerID(attackingUnit));    
            Unit.setCustomValue(targetUnit, w3.id);
        }
        Timer.add(24 * 1, hitUnit, EUDFuncPtr (2, 0) (function(callbackUnit, intervalCount) {
            Unit.setCustomValue(callbackUnit, 0); // Reset "recently hit by bounce"
        }));
    });
    addWeapon(w3);



    const w4 = WeaponType.alloc();
    w4.imageID = Const.Image_C_10_Canister_Rifle_Hit;
    w4.baseDamage = 300;
    w4.cooldown = 30;
    w4.onTargetHit = EUDFuncPtr (2, 0) (function(attackingUnit, targetUnit) {
        Utils.createImageSpriteAtUnitPosition(targetUnit, Const.Image_Explosion2_Medium);
    });
    addWeapon(w4);
  


    const w5 = WeaponType.alloc();
    w5.imageID = Const.Image_C_10_Canister_Rifle_Hit;
    w5.baseDamage = 0;
    w5.cooldown = 15;
    w5.onUnitHit = EUDFuncPtr (2, 0) (function(attackingUnit, hitUnit) {
        // if (!Buffs.unitHasBuff(hitUnit)) {
        //     Buffs.activateUnitBuff(hitUnit, Buffs.Buff_SlowingSpores);
        // }
    });
    addWeapon(w5);



    const w6 = WeaponType.alloc();
    w6.imageID = Const.Image_C_10_Canister_Rifle_Hit;
    w6.baseDamage = 5;
    w6.cooldown = 0;
    w6.onUnitKilled = EUDFuncPtr (2, 0) (function(attackingUnit, targetUnit) {
        Utils.createImageSpriteAtUnitPosition(attackingUnit, Const.Image_Restoration_Hit_Small);
        Unit.heal(attackingUnit, 10);
    });
    w6.onUnitHit = EUDFuncPtr (2, 0) (function(attackingUnit, hitUnit) {
        Utils.knockbackUnit(hitUnit, Unit.getVelocityDirection1(attackingUnit), 8);
        Unit.attackUnit(hitUnit, attackingUnit);
    });
    addWeapon(w6);


    const w7 = WeaponType.alloc();
    w7.imageID = Const.Image_C_10_Canister_Rifle_Hit;
    w7.baseDamage = 50;
    w7.cooldown = 5;
    w7.onTargetHit = EUDFuncPtr (2, 0) (function(attackingUnit, targetUnit) {
        Utils.createImageSpriteAtUnitPosition(targetUnit, Const.Image_Explosion2_Small);
    });
    w7.onUnitHit = EUDFuncPtr (2, 0) (function(attackingUnit, hitUnit) {
        Utils.createOverlayForUnit(hitUnit, Const.Image_Flames1_Type1_Small, 24*3);
        Unit.junkYardDog(hitUnit);
    });
    addWeapon(w7);
    */



    // Const.Image_Acid_Spore_Hit,
    // Const.Image_Glave_Wurm_Seeker_Spores_Hit,
    // Const.Image_Needle_Spine_Hit,
    // Const.Image_Particle_Beam_Hit,
    // Const.Image_Fusion_Cutter_Hit,
    // Const.Image_Arclite_Shock_Cannon_Hit,
    // Const.Image_Yamato_Gun_Hit,
}

function applyPlayerWeaponHitToUnitsAtLocation(attackingUnit, weapon: WeaponType, location, playerIndexStart, playerIndexEnd) {
    foreach(player : EUDLoopRange(playerIndexStart, playerIndexEnd)) {
        foreach(ptr, unit : EUDLoopPlayerUnit(player)) {
            if (Utils.CUnitInLocation(unit, location)) {
                if (weapon.onUnitHit != 0) {
                    weapon.onUnitHit(attackingUnit, unit);
                }
                const unitKilled = Unit.damage(unit, weapon.baseDamage);
                if (unitKilled && weapon.onUnitKilled != 0) {
                    weapon.onUnitKilled(attackingUnit, unit);
                }
            }
        }
    }
}

function applyPlayerWeaponHitToTarget(attackingUnit, weapon: WeaponType, targetUnit) {
    if (weapon.onTargetHit != 0) {
        weapon.onTargetHit(attackingUnit, targetUnit);
    }
}