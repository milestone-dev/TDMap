import ETK.ETKUnit as Unit;
import ETK.ETKUtils as Utils;
import ETK.ETKTimer as Timer;
import ETK.ETKConstants as Const;
import ETK.ETKCommon as Common;
import Weapons;
import Traps;
import customText as ct;

const Screen = StringBuffer(256);
const MouseLeftButtonPress = EUDArray(6);
const MouseLeftButtonDown = EUDArray(6);
const MouseRightButtonPress = EUDArray(6);
const MouseRightButtonDown = EUDArray(6);
const MouseMiddleButtonPress = EUDArray(6);
const KeyQDown = EUDArray(6);
const KeyPDown = EUDArray(6);
const KeyUDown = EUDArray(6);

const FireLocation = $L("Splash");

// TODO replace with objects

const PlayerWeaponIndex = EUDArray(6);
const PlayerWeaponCooldown = EUDArray(6);
const PlayerSelectedTrap = EUDArray(6);

const MouseLoc = [
	$L("MouseLoc1"),
	$L("MouseLoc2"),
	$L("MouseLoc3"),
	$L("MouseLoc4"),
	$L("MouseLoc5"),
	$L("MouseLoc6")
];

const SelectionAddresses = [
	0x6284E8,
	0x628518,
	0x628548,
	0x628578,
	0x6285A8,
	0x6285D8
];

const SelectedUnitID = EUDArray(6);

function updateSelectedUnit(playerID) {
	const address = SelectionAddresses[playerID];
	const ptr = dwread(address);
	const epd = EPD(ptr);
	if (ptr != 0) {
		SelectedUnitID[playerID] = epd;
	} else {
		SelectedUnitID[playerID] = 0;
	}
}

function refreshTrapSelection(playerID) {
	PlayerSelectedTrap[playerID] = 0;
}

// OLD UNIT
function selectTrap(unit, trapID) {
	if (trapID == 99) {
		Utils.removeUnit(unit);
		return;
	} 
	Screen.printf("selectTrap {}", trapID);
	const trap = Traps.getTowerType(trapID);
	const trapSpriteID = 212;
	Utils.setSpriteImage(trapSpriteID, trap.spriteImageID);
	const trapUnit = Utils.replaceUnit(unit, Const.Unit_TerranBeacon);
	// Unit.setOrder(trapUnit, Const.Order_Stop);
	Unit.setCustomValue(trapUnit, trap.id);
	Unit.setRankIncrease(trapUnit, 0);
	// Utils.setSpriteImage(trapSpriteID, Const.Image_Terran_Construction_Large);
	Unit.setCommandCard(trapUnit, 100 + Unit.getPlayerID(trapUnit));
	// const tmp = Utils.createUnit(Const.Unit_TerranMarine, $L("Anywhere"), $P1);
	// Utils.removeUnit(tmp);
}

function initMap() {
	EUDRegisterObjectToNamespace("MouseLeftButtonPress", MouseLeftButtonPress);
	EUDRegisterObjectToNamespace("MouseLeftButtonDown", MouseLeftButtonDown);
	EUDRegisterObjectToNamespace("MouseRightButtonPress", MouseRightButtonPress);
	EUDRegisterObjectToNamespace("MouseRightButtonDown", MouseRightButtonDown);

	EUDRegisterObjectToNamespace("MouseMiddleButtonPress", MouseMiddleButtonPress);
	EUDRegisterObjectToNamespace("KeyQDown", KeyQDown);
	EUDRegisterObjectToNamespace("KeyPDown", KeyPDown);
	EUDRegisterObjectToNamespace("KeyUDown", KeyUDown);
	Traps.loadTraps();
}

function onPluginStart() {
	randomize();
	initMap();
	Utils.setup();
}

function beforeTriggerExec() {
	Utils.EUDTurbo();
	Timer.tick();
	EUDPlayerLoop()();
	if (getcurpl() < $P7) {
		const playerID = getcurpl();
		updateSelectedUnit(playerID);
		const selectedUnit = SelectedUnitID[playerID];
		const mouseLocation = MouseLoc[playerID];

		// TOGGLING LEVEL TRAPS
		if (KeyPDown[playerID]) {
			SetSwitch((0), (6));
		}

		// TRAPS ACTIVE
		foreach(ptr, unit : EUDLoopPlayerUnit(playerID)) {
			if (Unit.getUnitType(unit) == Const.Unit_TerranBeacon) {

				Traps.updateTower(unit);

				const trapUnit = unit;
				const trap = Traps.getTowerType(Unit.getCustomValue(trapUnit));

				// Upgrading
				const queueUnitType = Unit.getBuildQueue1(trapUnit);
				if (Unit.getBuildQueueLength(trapUnit) > 0) {
					Unit.clearBuildQueue(trapUnit);
				}

				if (queueUnitType == 99) {
					const cannonUnit = Unit.getConnectedUnit(trapUnit);
					Utils.removeUnit(trapUnit);
					Utils.removeUnitSafe(cannonUnit);
					refreshTrapSelection(playerID);
				} else if (queueUnitType >= 100 && queueUnitType <= 105) {
					Unit.setRankIncrease(trapUnit, Unit.getRankIncrease(trapUnit)+1);
					refreshTrapSelection(playerID);
				}

				//Firing
				if (Unit.getGroundWeaponCooldown(trapUnit) > trap.data.cooldown) {
					Unit.setGroundWeaponCooldown(trapUnit, trap.data.cooldown);		
				}

				if (Unit.getGroundWeaponCooldown(trapUnit) == 0
					&& Unit.getOrder(trapUnit) == Const.Order_Attack_Building
					&& Unit.isOrderTargetUnitValid(trapUnit)) {
					trap.fire(trapUnit);
					Unit.setGroundWeaponCooldown(trapUnit, trap.data.cooldown);	
				}
			}
		}

		// PLACING TRAPS
		if (selectedUnit != 0 && Unit.getUnitType(selectedUnit) == Const.Unit_KhaydarinCrystalFormation) {

			if ( Unit.getOrder(selectedUnit) == Const.Order_Build_SCV) {
				var x, y = Utils.getLocationPoint(MouseLoc[playerID]);
			    x = ((x / 32) * 32) + 32;
			    y = ((y / 32) * 32) + 32;
			    Utils.centerLocationOnPoint(FireLocation, x, y, 64, 64);
			    Utils.offsetLocation(MouseLoc[playerID], 16, 16);
				Traps.createBaseTower(MouseLoc[playerID], playerID);
    			Unit.setOrder(selectedUnit, Const.Order_Nothing2_Normal);
			}
		}

		// SELECTING TRAPS
		if (selectedUnit != 0 && Unit.getUnitType(selectedUnit) == Const.Unit_TerranFlagBeacon) {
			const queueUnitType = Unit.getBuildQueue1(selectedUnit);
			if (queueUnitType != Const.Unit_None) {
				Screen.print("SelectingTrap");
				Traps.setTowerType(selectedUnit, queueUnitType);
				Unit.clearBuildQueue(selectedUnit);
			}
		}


		// TRAPS DISPLAY
		if (selectedUnit != 0 && Unit.getUnitType(selectedUnit) == Const.Unit_TerranBeacon) {


			if (PlayerSelectedTrap[playerID] != selectedUnit) {


				if (IsUserCP()) {
					Utils.setUpgrade(7, Unit.getRankIncrease(selectedUnit), playerID);
					Utils.setUnitWeapon(Const.Unit_TerranBeacon, Unit.getCustomValue(selectedUnit));
				}

				Utils.setUnitCost(100 + playerID, 10 + Unit.getRankIncrease(selectedUnit) * 10);

				PlayerSelectedTrap[playerID] = selectedUnit;
				Unit.setStatusFlags(selectedUnit, 0x04340008);
				Timer.add(0, selectedUnit, EUDFuncPtr (2, 0) (function(callbackUnit, intervalCount) {
					Unit.setStatusFlags(callbackUnit, 0x04340003);
				}));
			}
			
			Screen.printfAt(1,
				"O = {}, V? TU {}",
				Unit.getOrder(selectedUnit),
				Unit.isOrderTargetUnitValid(selectedUnit),
				Common.PTR(Unit.getOrderTargetUnit(selectedUnit))
				// Unit.getCurrentButtonSet(selectedUnit),
				// Unit.getCommandCard(selectedUnit)
				);
		}

		/*

		// SWITCHING WEAPONS
		var weaponID = PlayerWeaponIndex[playerID];

		if (PlayerWeaponCooldown[playerID] > 0) {
			PlayerWeaponCooldown[playerID]--;
		}

		if (KeyQDown[playerID] != 0) {
			weaponID++;
			if (!Weapons.isWeaponValid(weaponID)) {
				weaponID = 0;
			}
			PlayerWeaponIndex[playerID] = weaponID;
				PlayWAV("sound\\bullet\\LaserHit.wav");
		}


		// FIRING
		if (false) {

			// ct.chatAnnouncement("Right click to fire. [", weaponID,"]");

			const weapon = Weapons.getWeapon(weaponID);

			if (PlayerWeaponCooldown[playerID] == 0 && MouseRightButtonPress[playerID]) {
				const x, y = Utils.getLocationPoint(mouseLocation);
				// Screen.printfAt(0, "x {} y {} ", x, y);
				Utils.centerLocationOnPoint(FireLocation, x, y, weapon.radius, weapon.radius);
				Weapons.playWeaponSfx(weapon.id);
				if (weapon.imageID) {
					Utils.createImageSpriteAtLocation(weapon.imageID, FireLocation);
				}
				if (Bring($P7, AtLeast, 1, Const.Unit_AnyUnit, FireLocation)) {
					weapon.fire(playerID, x, y, FireLocation, weapon.id);
				}
				PlayerWeaponCooldown[playerID] = weapon.cooldown;
			}
		}
		*/
	}
	EUDEndPlayerLoop();

	// Missiles
	foreach(ptr, unit : EUDLoopPlayerUnit(P8)) {
		if (Unit.getUnitType(unit) == Const.Unit_ProtossObserver) {

			const targetUnit = Unit.getTargetUnit(unit);
			if (Unit.isOrderTargetUnitValid(unit)) {
				const uX, uY = Unit.getPosition(unit);
				const tX, tY = Unit.getPosition(targetUnit);
				Unit.setOrder(unit, Const.Order_Ignore_Normal);
				Unit.setOrderTargetX(unit, tX);
				Unit.setOrderTargetY(unit, tY);
				// Unit.setTargetUnit(unit, targetUnit);
				if (Utils.abs(uX-tX) < 24 && Utils.abs(uY-tY) < 24) {
					Traps.missileHit(unit);
				}
			} else {
				Utils.removeUnit(unit);
			}
		}
	}
}